(defun task1 (A B)
(cond ((null A) (null B))
((null B) (null A))
((equal (car A) (car B)) (task1 (cdr A) (cdr B)))
)
)
(task1 '(1 2 ab) '(1 2 ab))

(defun task2 (A B)
(cond ((null A) nil)
((member (car A) B) (cons (car A) (task2 (cdr A) B)))
((task2 (cdr A) B))
)
)
(task2 '(1 2 3 4 p) '(p 1 2 ab))

(defun task3 (func lst) 
(cond ((null lst) nil)
((funcall func (car lst)) (cons '* (cons (car lst) (task3 func (cdr lst)))))
(t (cons (car lst) (task3 func (cdr lst))))
)
)
(task3 #'(lambda (x) (>= x 0)) `(1 2 3 0 -1 -2 9 -3 8))
(task3 #'evenp `(1 2 3 0 -1 -2 9 -3 8))
